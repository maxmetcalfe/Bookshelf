{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/maxmetcalfe/Documents/src/BookList/pages/index.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport fetch from 'node-fetch';\n\nvar parser = require('fast-xml-parser');\n\nfunction fetchData(url) {\n  return new Promise(function (resolve, reject) {\n    fetch(url).then(function (res) {\n      return res.text();\n    }).then(function (body) {\n      return resolve(body);\n    });\n  });\n}\n\nvar MainComponent = function MainComponent(props) {\n  console.log({\n    props: props\n  });\n  console.log(props.GoodreadsResponse.search.results);\n  var bookElements = [];\n\n  for (var i = 0; i < props.GoodreadsResponse.search.results.length; i++) {\n    bookElements.push(__jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 23\n      }\n    }, \"Hello world!\"));\n  }\n\n  return bookElements;\n};\n\nMainComponent.getInitialProps = function _callee() {\n  var xmlData, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetchData(\"https://www.goodreads.com/search.xml?key=P89RUgLvpIk3VVqzk54Kcw&q=Ender%27s+Game\"));\n\n        case 2:\n          xmlData = _context.sent;\n          data = parser.parse(xmlData);\n          return _context.abrupt(\"return\", parser.parse(xmlData));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default MainComponent;","map":{"version":3,"sources":["/Users/maxmetcalfe/Documents/src/BookList/pages/index.js"],"names":["React","fetch","parser","require","fetchData","url","Promise","resolve","reject","then","res","text","body","MainComponent","props","console","log","GoodreadsResponse","search","results","bookElements","i","length","push","getInitialProps","xmlData","data","parse"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,IAAAA,KAAK,CAACI,GAAD,CAAL,CACGI,IADH,CACQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADX,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,aAAIL,OAAO,CAACK,IAAD,CAAX;AAAA,KAFZ;AAGD,GAJM,CAAP;AAKD;;AAED,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,IAAAA,KAAK,EAALA;AAAD,GAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,iBAAN,CAAwBC,MAAxB,CAA+BC,OAA3C;AAEA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACG,iBAAN,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCG,MAA3D,EAAmED,CAAC,EAApE,EAAwE;AACtED,IAAAA,YAAY,CAACG,IAAb,CAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAlB;AACD;;AAED,SAAOH,YAAP;AACD,CAXD;;AAaAP,aAAa,CAACW,eAAd,GAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACVpB,SAAS,CAAC,kFAAD,CADC;;AAAA;AAC1BqB,UAAAA,OAD0B;AAE1BC,UAAAA,IAF0B,GAEnBxB,MAAM,CAACyB,KAAP,CAAaF,OAAb,CAFmB;AAAA,2CAIvBvB,MAAM,CAACyB,KAAP,CAAaF,OAAb,CAJuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;;AAOA,eAAeZ,aAAf","sourcesContent":["import React from 'react'\nimport fetch from 'node-fetch'\n\nvar parser = require('fast-xml-parser');\n\nfunction fetchData(url) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then(res => res.text())\n      .then(body => resolve(body))\n  })\n}\n\nconst MainComponent = (props) => {\n  console.log({props});\n  console.log(props.GoodreadsResponse.search.results);\n  \n  let bookElements = [];\n  \n  for (let i = 0; i < props.GoodreadsResponse.search.results.length; i++) {\n    bookElements.push(<div>Hello world!</div>);\n  }\n\n  return bookElements;\n}\n\nMainComponent.getInitialProps = async () => {\n  let xmlData = await fetchData(\"https://www.goodreads.com/search.xml?key=P89RUgLvpIk3VVqzk54Kcw&q=Ender%27s+Game\");\n  let data = parser.parse(xmlData);\n\n  return parser.parse(xmlData);\n}\n\nexport default MainComponent\n"]},"metadata":{},"sourceType":"module"}